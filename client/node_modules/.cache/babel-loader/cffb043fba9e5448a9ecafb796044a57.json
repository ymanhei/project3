{"ast":null,"code":"var React = require('react');\n\nvar createReactClass = require('create-react-class');\n\nvar ReactDOM = require('react-dom');\n\nmodule.exports = {\n  createClass: function createClass(chartType, methodNames, dataKey) {\n    var excludedProps = ['data', 'options', 'redraw'];\n    var classData = {\n      displayName: chartType + 'Chart',\n      getInitialState: function getInitialState() {\n        return {};\n      },\n      render: function render() {\n        var _props = {\n          ref: 'canvass'\n        };\n\n        for (var name in this.props) {\n          if (this.props.hasOwnProperty(name)) {\n            if (excludedProps.indexOf(name) === -1) {\n              _props[name] = this.props[name];\n            }\n          }\n        }\n\n        return React.createElement('canvas', _props);\n      }\n    };\n    var extras = ['clear', 'stop', 'resize', 'toBase64Image', 'generateLegend', 'update', 'addData', 'removeData'];\n\n    function extra(type) {\n      classData[type] = function () {\n        return this.state.chart[type].apply(this.state.chart, arguments);\n      };\n    }\n\n    classData.componentDidMount = function () {\n      this.initializeChart(this.props);\n    };\n\n    classData.componentWillUnmount = function () {\n      var chart = this.state.chart;\n      chart.destroy();\n    };\n\n    classData.componentWillReceiveProps = function (nextProps) {\n      var chart = this.state.chart;\n\n      if (nextProps.redraw) {\n        chart.destroy();\n        this.initializeChart(nextProps);\n      } else {\n        dataKey = dataKey || dataKeys[chart.name];\n        updatePoints(nextProps, chart, dataKey);\n\n        if (chart.scale) {\n          chart.scale.xLabels = nextProps.data.labels;\n\n          if (chart.scale.calculateXLabelRotation) {\n            chart.scale.calculateXLabelRotation();\n          }\n        }\n\n        chart.update();\n      }\n    };\n\n    classData.initializeChart = function (nextProps) {\n      var Chart = require('chart.js');\n\n      var el = ReactDOM.findDOMNode(this);\n      var ctx = el.getContext(\"2d\");\n      var chart = new Chart(ctx)[chartType](nextProps.data, nextProps.options || {});\n      this.state.chart = chart;\n    }; // return the chartjs instance\n\n\n    classData.getChart = function () {\n      return this.state.chart;\n    }; // return the canvass element that contains the chart\n\n\n    classData.getCanvass = function () {\n      return this.refs.canvass;\n    };\n\n    classData.getCanvas = classData.getCanvass;\n    var i;\n\n    for (i = 0; i < extras.length; i++) {\n      extra(extras[i]);\n    }\n\n    for (i = 0; i < methodNames.length; i++) {\n      extra(methodNames[i]);\n    }\n\n    return createReactClass(classData);\n  }\n};\nvar dataKeys = {\n  'Line': 'points',\n  'Radar': 'points',\n  'Bar': 'bars'\n};\n\nvar updatePoints = function updatePoints(nextProps, chart, dataKey) {\n  var name = chart.name;\n\n  if (name === 'PolarArea' || name === 'Pie' || name === 'Doughnut') {\n    nextProps.data.forEach(function (segment, segmentIndex) {\n      if (!chart.segments[segmentIndex]) {\n        chart.addData(segment);\n      } else {\n        Object.keys(segment).forEach(function (key) {\n          chart.segments[segmentIndex][key] = segment[key];\n        });\n      }\n    });\n\n    while (nextProps.data.length < chart.segments.length) {\n      chart.removeData();\n    }\n  } else if (name === \"Radar\") {\n    chart.removeData();\n    nextProps.data.datasets.forEach(function (set, setIndex) {\n      set.data.forEach(function (val, pointIndex) {\n        if (typeof chart.datasets[setIndex][dataKey][pointIndex] == \"undefined\") {\n          addData(nextProps, chart, setIndex, pointIndex);\n        } else {\n          chart.datasets[setIndex][dataKey][pointIndex].value = val;\n        }\n      });\n    });\n  } else {\n    while (chart.scale.xLabels.length > nextProps.data.labels.length) {\n      chart.removeData();\n    }\n\n    nextProps.data.datasets.forEach(function (set, setIndex) {\n      set.data.forEach(function (val, pointIndex) {\n        if (typeof chart.datasets[setIndex][dataKey][pointIndex] == \"undefined\") {\n          addData(nextProps, chart, setIndex, pointIndex);\n        } else {\n          chart.datasets[setIndex][dataKey][pointIndex].value = val;\n        }\n      });\n    });\n  }\n};\n\nvar addData = function addData(nextProps, chart, setIndex, pointIndex) {\n  var values = [];\n  nextProps.data.datasets.forEach(function (set) {\n    values.push(set.data[pointIndex]);\n  });\n  chart.addData(values, nextProps.data.labels[setIndex]);\n};","map":null,"metadata":{},"sourceType":"script"}